---
import { Icon } from 'astro-icon/components';
import type { Content } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
  items = [],
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props as Content;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-stone-400',
    }}
  />
  <div class="max-w-xs sm:max-w-md m-auto mb-8 md:mb-12 flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
    {
      callToAction && (
        <div class="flex w-full sm:w-auto">
          {typeof callToAction === 'string' ? (
            <Fragment set:html={callToAction} />
          ) : (
            <a class="btn btn-primary sm:mb-0 w-full" href={callToAction?.href} rel="noopener">
              {callToAction?.icon && (
                <>
                  <Icon name={callToAction.icon} class="w-5 h-5 mr-1 -ml-1.5 rtl:-mr-1.5 rtl:ml-1" />
                </>
              )}
              {callToAction?.text}
            </a>
          )}
        </div>
      )
    }
    {
      callToAction2 && (
        <div class="flex w-full sm:w-auto">
          {typeof callToAction2 === 'string' ? (
            <Fragment set:html={callToAction2} />
          ) : (
            <a class="btn w-full" href={callToAction2?.href}>
              {callToAction2?.icon && (
                <>
                  <Icon name={callToAction2.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                  &nbsp;
                </>
              )}
              {callToAction2.text}
            </a>
          )}
        </div>
      )
    }
  </div>
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 text-lg dark:text-stone-400" set:html={content} />}

        {
          items && (
            <div class="space-y-8">
              {items.map(({ title: title2, description, icon }) => (
                <div class="flex">
                  <div class="flex-shrink-0">
                    <div class="flex h-7 w-7 items-center justify-center rounded-full bg-secondary dark:bg-primary text-neutral-50">
                      <Icon name={icon ? icon : 'tabler:check'} class="w-5 h-5" />
                    </div>
                  </div>
                  <div class="ml-4 rtl:ml-0 rtl:mr-4">
                    {title2 && <h3 class="text-lg font-medium leading-6 dark:text-white">{title2}</h3>}
                    {description && <p class="mt-2 text-muted dark:text-stone-400" set:html={description} />}
                  </div>
                </div>
              ))}
            </div>
          )
        }
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-4xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto w-full rounded-lg bg-neutral-500 shadow-lg"
                  width={500}
                  height={500}
                  widths={[400, 768]}
                  sizes="(max-width: 768px) 100vw, 432px"
                  layout="responsive"
                  {...(image as any)}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>
